version: '3.8'

services:
  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8081:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka

  lecture-service:
    build:
      context: ./lecture-service
      dockerfile: Dockerfile
    container_name: lecture-service
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_JSON: >
        {
          "spring.application.name": "lecture-service",
          "spring.kafka.bootstrap-servers": "kafka:9093",
          "topics.lecture.viewed": "lecture-viewed",
          "management.endpoints.web.exposure.include": "health,metrics,info,env,beans",
          "management.endpoint.health.show-details": "always"
        }

    depends_on:
      - kafka